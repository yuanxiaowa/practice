// 四个方向的键值对
$dirs = (l 'left') (t 'top') (b 'bottom') (r 'right')
// 设计图字体大小
$fs = 24
// 设计图总体宽度
$mw = 720

/**
  * type function
  * name 根据键获取值
  * @param hash 键值对
  * @param key 键
  */
get(hash, key)
	return pair[1] if key == pair[0] for pair in hash
	
/**
  * type mixin
  * name 媒体查询
  * width 宽度
  */
media(width)
	unless unit(width) == 'px'
		width = unit(width, 'px')
	@media screen and (max-width: width)
		{block}

/**
  * type mixin
  * name 元素居中
  * @param xis 居中的轴，默认为x和y，可以用x或y来指定特定方向
  * @param pos 定位方式，默认为absolute
  */
center(xis = 0, pos = absolute)
	position pos
	if xis == 'x'
		left 50%
		transform translate(-50%, 0)
	else if xis == 'y'
		top 50%
		transform translate(0, -50%)
	else
		top 50%
		left 50%
		transform translate(-50%, -50%)

/**
  * type function
  * name 相对单位rem
  * 默认返回1rem
  * @param p 所占像素大小, 默认为$fs
  * @param m 根元素像素大小, 默认为$fs
  */
rem(p = $fs, m = $fs)
	return (arguments[0] / 24)rem (arguments[1] / 24)rem if (arguments[1])
	(p / m)rem

/**
  * type function
  * name 相对单位em
  * 默认返回1em
  * @param p 所占像素大小, 默认为$fs
  * @param m 字体像素大小, 默认为$fs
  */
em(p = $fs, m = $fs)
	return 1px if arguments[0] <= 1
	(p / m)em

/**
  * type function
  * name 百分比
  * 无参数默认为100%
  * @param p 分子, 默认为1
  * @param m 分母, 默认为1
  */
per(p = 1, m = 1)
	(p / m * 100%)
	
/**
  * type mixin
  * name 背景图片
  * @param src 图片链接地址
  */
img(src)
	src = s(src)
	src = match('\.(gif|png|jpe?g)$', src) ? src : s(src + '.png')
	src = match('/', src) ? src : s('../image/%s', src)
	background-image url(src)


/**
  * type mixin
  * name 圆形
  */
circle()
	border-radius 50%

/**
  * type mixin
  * name 溢出显示省略号
  * @param mut 是否多行
  * @param lines 当为多行时候，指定行数
  */
ellipsis(mut, lines = 2)
	overflow hidden
	text-overflow ellipsis
	if mut
		display -webkit-box
		-webkit-line-clamp lines
		-webkit-box-orient vertical
	else
		white-space nowrap
/**
  * type mixin
  * name 矩形
  * @param width 宽度
  * @param height 高度，无则为宽度
  */
rect(width, height = width)
	width width
	height height 
	
/**
  * type mixin
  * name 三角形
  * @param width 高度
  * @param color 颜色
  * @param direction 方向，默认向上
  * description 如果没有设置display或者display为inline, 则自动添加为block
  */
triangle(width, color, direction = t)
	if !@display || @display == 'inline'
		display block
	width 0
	border width solid transparent
	border-{get($dirs, direction)}-color color
	border-{opposite-position(get($dirs, direction))}-width 0

/**
  * type mixin
  * name 直角三角形
  * @param width 边长
  * @param color 颜色
  * @param directions 直角边所在方向
  */
r-triangle(width, color, directions = (l t))
	if !@display || @display == 'inline'
		display block
	width 0
	border-{get($dirs, directions[0])} width solid color
	border-{opposite-position(get($dirs, directions[1]))} width solid transparent

/**
  * type mixin
  * name 微软雅黑
  */
yahei()
	font-family 'Microsoft YaHei'

/**
  * type mixin
  * name 宋体
  */
songti()
	font-family SimSun
	
/*-------------- 数量查询 start -----------------*/

/**
  * type mixin
  * name 子元素个数等于某个值，就为其指定给定样式
  * @param n 数量
  * @param ele 标签名
  */
exactly(n, ele)
	{ele}:nth-last-child({n}):first-child,
	{ele}:nth-last-child({n}):first-child ~ {ele}
		{block}
	
/**
  * type mixin
  * name 大于等于某个值
  * @param n 数量
  * @param ele 标签名
  */
at-least(n, ele)
	{ele}:nth-last-child(n + {n}),
	{ele}:nth-last-child(n + {n}) ~ {ele}
		{block}
	
/**
  * type mixin
  * name 小于等于
  * @param n 数量
  * @param ele 标签名
  */
at-most(n, ele)
	{ele}:nth-last-child(-n + {n}):first-child,
	{ele}:nth-last-child(-n + {n}):first-child ~ {ele}
		{block}
	
/**
  * type mixin
  * name 某个范围
  * @param a 数量
  * @param b 数量
  * @param ele 标签名
  */
between(a, b, ele)
	if a > b
		a = a + b
		b = a - b
		a = a - b
	{ele}:nth-last-child(n + {a}):nth-last-child(-n + {b}):first-child,
	{ele}:nth-last-child(n + {a}):nth-last-child(-n + {b}):first-child ~ {ele}
		{block}
/*-------------- 数量查询 end -----------------*/

/*--------- 文档图标 start -----------*/
/**
  * type mixin
  * name 给文档标签添加图标
  * @params arguments 参数，键值对，如 (pdf "pdf.png")
  */
doc_icons()
	for o in arguments
		a[href$={s('".%s"', o[0])}]
			img o[1]
/*--------- 文档图标 end -----------*/

/*--------- Navicon Transformicons start -----------*/
navicon(ele = ('.lines-button' 'arrow' '.lines' '.close'), type = 1, size = 70px, color = #f00, transition = .3s)
	$scale = (1 / 1.8)
	$x = type == 1 ? 1 : -1
	line()
		display inline-block
		width size
		height (size / 7)
		background color
		border-radius (size / 14)
		transition transition
	{ele[0]}
		display inline-block
		padding (size / 2) (size / 4)
		transition transition
		cursor pointer
		user-select none
		border-radius (size / 7)
		&:hover
			opacity 1
			{ele[2]}
				&:before
					top (size / 3.5)
				&:after
					top -(size / 3.5)
		&:active
			transition 0
			background rgba(0, 0, 0, .1) 
		&{ele[3]}
			transform scale3d(.8, .8, .8)
			{ele[2]}
				&:before,
				&:after
					top 0
					width (size * $scale) 
					if type == 1
						transform-origin (size * $scale / 14) center
					else
						transform-origin (size * $scale * (1 - 1 / 14)) center
				&:before
					transform rotate3d(0, 0, 1, (40 * $x)deg)
				&:after
					transform rotate3d(0, 0, 1, -(40 * $x)deg)
	{ele[2]}
		line()
		position relative
		&:after,
		&:before
			line()
			position absolute
			content '' 
			if type == 1
				left 0
			else
				right 0
		&:before
			top (size / 4)
		&:after
			top -(size / 4)
		
/*--------- Navicon Transformicons end -----------*/